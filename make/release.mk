# Generated By: Cursor (Claude Sonnet 4.5)
# Release Targets
# ===============

.PHONY: release check-release version

# Extract version from pyproject.toml
VERSION := $(shell grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')

version: ## Show current version from pyproject.toml
	@echo $(VERSION)

check-release: ## Verify release prerequisites
	@echo "Checking release prerequisites..."
	@# Check on main branch
	@BRANCH=$$(git rev-parse --abbrev-ref HEAD); \
	if [ "$$BRANCH" != "main" ]; then \
		printf "$(RED)❌ Must be on main branch (currently on $$BRANCH)$(RESET)\n"; \
		exit 1; \
	fi
	@printf "$(GREEN)✓ On main branch$(RESET)\n"
	@# Check no uncommitted changes
	@if [ -n "$$(git status --porcelain)" ]; then \
		printf "$(RED)❌ Uncommitted changes detected$(RESET)\n"; \
		git status --short; \
		exit 1; \
	fi
	@printf "$(GREEN)✓ No uncommitted changes$(RESET)\n"
	@# Check up to date with remote
	@REMOTE=$$(git config branch.main.remote || echo "origin"); \
	git fetch $$REMOTE main --quiet; \
	LOCAL=$$(git rev-parse main); \
	REMOTE_REF=$$(git rev-parse $$REMOTE/main); \
	if [ "$$LOCAL" != "$$REMOTE_REF" ]; then \
		printf "$(RED)❌ Branch not up to date with $$REMOTE/main$(RESET)\n"; \
		exit 1; \
	fi
	@printf "$(GREEN)✓ Up to date with remote$(RESET)\n"
	@# Check tag doesn't exist locally
	@if git rev-parse "v$(VERSION)" >/dev/null 2>&1; then \
		printf "$(RED)❌ Tag v$(VERSION) already exists locally$(RESET)\n"; \
		exit 1; \
	fi
	@printf "$(GREEN)✓ Tag v$(VERSION) does not exist$(RESET)\n"

release: check-release format lint test build ## Create and push a release tag
	@echo ""
	@REMOTE=$$(git config branch.main.remote || echo "origin"); \
	printf "$(YELLOW)Releasing v$(VERSION)...$(RESET)\n"; \
	git tag "v$(VERSION)"; \
	git push $$REMOTE "v$(VERSION)"; \
	printf "$(GREEN)✅ Released v$(VERSION)$(RESET)\n"


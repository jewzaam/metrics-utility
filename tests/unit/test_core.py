# Generated By: Cursor (Claude Sonnet 4.5)
"""Unit tests for core metrics utility functions."""

import socket

from metrics_utility import core


def test_sorted_keys() -> None:
    """Test sorted_keys function."""
    data = {"c": 3, "a": 1, "b": 2}
    assert core.sorted_keys(data) == ["a", "b", "c"]
    assert core.sorted_keys(None) is None
    assert core.sorted_keys({}) is None


def test_sorted_values() -> None:
    """Test sorted_values function."""
    data = {"c": 3, "a": 1, "b": 2}
    assert core.sorted_values(data) == [1, 2, 3]
    assert core.sorted_values(None) is None
    assert core.sorted_values({}) is None


def test_debug() -> None:
    """Test debug function."""
    core.setDebug(False)
    assert core.DEBUG is False
    core.debug("test")  # Should not print

    core.setDebug(True)
    assert core.DEBUG is True
    core.debug("test")  # Should print

    # Reset
    core.setDebug(False)


def test_enrichLabels() -> None:
    """Test enrichLabels function."""
    # Test None input
    assert core.enrichLabels(None) is None

    # Test dict without host
    labels: dict[str, str] = {"foo": "bar"}
    core.enrichLabels(labels)
    assert "host" in labels
    assert labels["host"] == socket.gethostname().lower()

    # Test dict with host already present
    labels_with_host: dict[str, str] = {"foo": "bar", "host": "custom"}
    core.enrichLabels(labels_with_host)
    assert labels_with_host["host"] == "custom"


def test_getGauge() -> None:
    """Test getGauge function."""
    # Clear gauges
    core.gauges.clear()

    # Create new gauge
    gauge1 = core.getGauge("test_gauge", "Test description", ["label1"])
    assert "test_gauge" in core.gauges

    # Get existing gauge
    gauge2 = core.getGauge("test_gauge", "Test description", ["label1"])
    assert gauge1 is gauge2


def test_getCounter() -> None:
    """Test getCounter function."""
    # Clear counters
    core.counters.clear()

    # Create new counter
    counter1 = core.getCounter("test_counter", "Test description", ["label1"])
    assert "test_counter" in core.counters

    # Get existing counter
    counter2 = core.getCounter("test_counter", "Test description", ["label1"])
    assert counter1 is counter2


def test_set_gauge() -> None:
    """Test set function."""
    core.gauges.clear()

    labels = {"foo": "bar"}
    core.set("test_set_gauge", 123.45, labels)

    assert "test_set_gauge" in core.gauges


def test_add_gauge() -> None:
    """Test add function."""
    core.gauges.clear()

    labels = {"foo": "bar"}
    core.add("test_add_gauge", 10.0, labels)

    assert "test_add_gauge" in core.gauges


def test_inc_counter() -> None:
    """Test inc function."""
    core.counters.clear()

    labels = {"foo": "bar"}
    core.inc("test_inc_counter", labels)

    assert "test_inc_counter" in core.counters


def test_dec_counter() -> None:
    """Test dec function (actually uses Gauge since counters can't decrease)."""
    core.gauges.clear()

    labels = {"foo": "bar"}
    core.dec("test_dec_counter", labels)

    # Note: dec() uses a Gauge, not Counter, since Prometheus counters can't decrease
    assert "test_dec_counter" in core.gauges
